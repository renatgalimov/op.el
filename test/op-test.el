(require 'ert)
(load-file "op.el")

(ert-deftest op-read-caches-result ()
  (let ((op-read-cache (make-hash-table :test 'equal))
        (called 0))
    (cl-letf (((symbol-function 'shell-command-to-string)
               (lambda (&rest _)
                 (setq called (1+ called))
                 "secret")))
      (should (string= (op-read "item") "secret"))
      (should (= called 1))
      (should (string= (op-read "item") "secret"))
      (should (= called 1)))))

(ert-deftest op-read-cache-cleanup-removes-old-entries ()
  (let ((op-read-cache (make-hash-table :test 'equal)))
    (puthash "old" (cons "val" (- (float-time) (* 11 60))) op-read-cache)
    (puthash "recent" (cons "val" (float-time)) op-read-cache)
    (op-read-cache-cleanup)
    (should-not (gethash "old" op-read-cache))
    (should (gethash "recent" op-read-cache))))

(provide 'op-test)
